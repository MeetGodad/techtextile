
SELECT 
    o.order_id,
    o.order_status,
    o.order_total_price,
    o.created_at,
    CASE 
        WHEN o.order_status = 'pending' THEN true
        ELSE false
    END AS can_cancel,
    json_agg(json_build_object(
        'product_name', p.product_name,
        'price', p.price,
        'quantity', oi.quantity,
        'item_price', oi.item_price,
        'variant_id', oi.variant_id,
        'variant_attributes', pv.variant_attributes
    )) AS order_items
FROM 
    Orders o
JOIN 
    OrderItems oi ON o.order_id = oi.order_id
JOIN 
    Products p ON oi.product_id = p.product_id
LEFT JOIN 
    ProductVariant pv ON oi.variant_id = pv.variant_id
WHERE 
    o.user_id = ${userId}
GROUP BY 
    o.order_id, o.order_status
ORDER BY 
    o.created_at DESC;


import { useState } from 'react';
import axios from 'axios';

function ColorSwatch({ color }) {
  return (
    <div 
      className="inline-block w-4 h-4 mr-2 border border-gray-300 rounded-sm" 
      style={{ backgroundColor: color }}
    />
  );
}

function parseVariantAttributes(variantAttributesString) {
  try {
    return JSON.parse(variantAttributesString);
  } catch (error) {
    console.error("Error parsing variant attributes:", error);
    return {};
  }
}

export default function OrderHistory({ initialOrders }) {
  const [orders, setOrders] = useState(initialOrders);

  const handleCancelOrder = async (orderId) => {
    if (confirm('Are you sure you want to cancel this order?')) {
      try {
        await axios.post('/api/cancel-order', { orderId });
        setOrders(orders.map(order => 
          order.order_id === orderId 
            ? { ...order, order_status: 'cancelled', can_cancel: false } 
            : order
        ));
        alert('Order cancelled successfully');
      } catch (error) {
        console.error('Error cancelling order:', error);
        alert('Failed to cancel order');
      }
    }
  };

  return (
    <div className="space-y-6">
      {orders.map(order => (
        <div 
          key={order.order_id} 
          className={`relative border rounded-lg p-4 ${
            order.order_status === 'cancelled' ? 'bg-gray-100 opacity-75' : 'bg-white'
          }`}
        >
          {order.order_status === 'cancelled' && (
            <div className="absolute top-0 left-0 right-0 bg-red-500 text-white text-center py-1 font-bold rounded-t-lg">
              Order Cancelled
            </div>
          )}
          <h3 className="text-xl font-semibold mb-2">Order #{order.order_id}</h3>
          <p className="text-gray-600">Status: {order.order_status}</p>
          <p className="text-gray-600">Total: ${order.order_total_price}</p>
          <p className="text-gray-600">Date: {new Date(order.created_at).toLocaleString()}</p>
          <h4 className="text-lg font-semibold mt-4 mb-2">Items:</h4>
          <ul className="space-y-4">
            {order.order_items.map((item, index) => {
              const variantAttributes = parseVariantAttributes(item.variant_attributes);
              return (
                <li key={index} className="border-b pb-2">
                  <p className="font-medium">{item.product_name}</p>
                  <p className="text-sm text-gray-600">
                    Quantity: {item.quantity}, 
                    Price: ${item.price}, 
                    Total: ${item.item_price}
                  </p>
                  {variantAttributes && (
                    <div className="text-sm text-gray-600 mt-1">
                      Variant: 
                      {variantAttributes.color && (
                        <span className="inline-flex items-center">
                          <ColorSwatch color={variantAttributes.color} />
                          Color: {variantAttributes.color}
                        </span>
                      )}
                      {variantAttributes.denier && (
                        <span className="ml-2">Denier: {variantAttributes.denier}</span>
                      )}
                    </div>
                  )}
                </li>
              );
            })}
          </ul>
          {order.can_cancel && (
            <button 
              onClick={() => handleCancelOrder(order.order_id)}
              className="mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
            >
              Cancel Order
            </button>
          )}
        </div>
      ))}
    </div>
  );
}